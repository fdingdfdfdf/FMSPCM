21c21
<                                 seconds_per_day, deltat_rad
---
>                                 seconds_per_day, deltat_rad, sigma_sca
25,27c25,27
<                                 calculate_CO2CO2_CIA, &
<                                 interpolateH2Ocont_PPC, interpolateH2Ocont_CKD, &
<                                 calculate_O2O2_cia
---
>                                  calculate_CO2CO2_CIA, &
>                                  interpolateH2Ocont_PPC, interpolateH2Ocont_CKD, &
>                                  calculate_O2O2_cia
30c30
<                               !angular_backscatter 
---
>                               !angular_backscatter
42c42
< ! version information 
---
> ! version information
47c47
< public :: radiance_init , radiance_update  ! 
---
> public :: radiance_init , radiance_update  !
55c55
< 
---
>   
58,59c58,60
<   !real    :: r_cld   = 10e-6           !cloud droplet radius
<   logical :: tidal_lock= .true.
---
>   logical :: adleo = .false.
>   real    :: gsca
>   !logical :: tidal_lock= .true.
65,66c66,67
<   
<   real    :: mCO2 = 400e-6
---
> 
>   !real    :: mCO2 = 400e-6
72,74c73,75
<   integer :: vgas = 1 !0, dry 
<   real    :: noon_longitude  = 270.
<   real    :: del_sol         = 1.4
---
>   integer :: vgas = 1 !0, dry
> !  real    :: noon_longitude  = 270.
> !  real    :: del_sol         = 1.4
76,77c77,78
<   real    :: del_sw          = 0.
<   real    :: kappa_gray = 1e-4 !.5d-4 !0.01 !5.0d-3 
---
> !  real    :: del_sw          = 0.
>   real    :: kappa_gray = 1e-4 !.5d-4 !0.01 !5.0d-3
89,96d89
<   integer :: iGas_H2O = 1
<   integer :: iGas_CO2 = 2
<   
<   integer :: iGas_O2  = 3
< 
<   integer :: iGas_CH4 = 6
<   integer :: iGas_N2  = 7
<   integer :: iGas_O3  = 8
121c114
<   real, allocatable, dimension(:) ::  nu_lw, nu_sw, sigma_lw, & !nS  
---
>   real, allocatable, dimension(:) ::  nu_lw, nu_sw, sigma_lw, & !nS
127c120
<   real, allocatable, dimension(:,:,:) ::  Tlev, plev, lnplev 
---
>   real, allocatable, dimension(:,:,:) ::  Tlev, plev, lnplev
129c122
<        net_surf_sw_down, surf_lw_down 
---
>        net_surf_sw_down, surf_lw_down
134c127
<   real, allocatable, dimension(:,:,:,:) ::  T_lin_weight !(nS,nLay) 
---
>   real, allocatable, dimension(:,:,:,:) ::  T_lin_weight !(nS,nLay)
137,138c130,131
<   real, allocatable, dimension(:,:,:,:) :: sigma_lw_ar, sigma_sw_ar 
<   real, allocatable, dimension(:,:,:)   :: sigma_total_dry, dtau_sw, & 
---
>   real, allocatable, dimension(:,:,:,:) :: sigma_lw_ar, sigma_sw_ar
>   real, allocatable, dimension(:,:,:)   :: sigma_total_dry, dtau_sw, &
147c140
<   real, allocatable, dimension(:,:,:,:,:) :: log_sig_d, log_sig_v,log_dtau_sw 
---
>   real, allocatable, dimension(:,:,:,:,:) :: log_sig_d, log_sig_v,log_dtau_sw
157c150
<     ! parameters for multiple scattering calculation 
---
>     ! parameters for multiple scattering calculation
161c154,155
<     real :: gsca, bL_cld       ! asymmetry parameter []
---
>    !  real :: gsca, bL_cld       ! asymmetry parameter []
>     real :: bL_cld       ! asymmetry parameter []
167,169c161,186
< namelist/radiance_nml/  solar_constant, nGas, nAng, nTem,  mCO2, & 
<         tidal_lock, stellar_blackbody, gray_debug, rayleigh_top, multiple_scat, &
<         Asurf, Trot, Torb, semimajor, ecc, obl, prec
---
> 
>   real, allocatable, dimension(:) :: vgas_mask
>   character(len=3),  allocatable, dimension(:) :: gas_name
>   real(8),  allocatable, dimension(:)  :: gas_molarconc
>   character(len=3), dimension(10)      :: gas_name_MAX
>   real(8),          dimension(10)      :: gas_molarconc_MAX,deltanu_trunc_MAX
>   ! initialize all these variables to -1
>   integer :: iGas_H2   = -1
>   integer :: iGas_He   = -1
>   integer :: iGas_H2O  = -1
>   integer :: iGas_CO2  = -1
>   integer :: iGas_CO   = -1
>   integer :: iGas_N2   = -1
>   integer :: iGas_O2   = -1
>   integer :: iGas_O3   = -1
>   integer :: iGas_SO2  = -1
>   integer :: iGas_H2S  = -1
>   integer :: iGas_CH4  = -1
>   integer :: iGas_NH3  = -1
> 
> namelist/radiance_nml/  solar_constant, nGas, nAng, nTem, &
>         gas_name_MAX, gas_molarconc_MAX, deltanu_trunc_MAX, &
>         stellar_blackbody, gray_debug, rayleigh_top, multiple_scat, &
>         Asurf, A_ice, A_water, gsca, adleo, Trot, Torb, semimajor, &
>         ecc, obl, prec
> 
174c191
< integer :: id_OLRnu, id_OLR !, id_solar, id_OSR, id_OSRnu 
---
> integer :: id_OLRnu, id_OLR !, id_solar, id_OSR, id_OSRnu
199c216
< integer :: i,j, k, iGas
---
> integer :: i,j, k, iGas, countgas
227c244
<        call error_mesg('radiance_mod:','Currently the code only runs with two-stream multiple',FATAL)    
---
>        call error_mesg('radiance_mod:','Currently the code only runs with two-stream multiple',FATAL)
236a254
> master = (gid == masterproc)
240a259
> allocate(vgas_mask      (nGas))
290,291c309,310
< allocate (dtau_sw_cld   (ie-is+1, je-js+1, num_levels, nS)) 
< allocate (dtau_sw_ray   (ie-is+1, je-js+1, num_levels, nS)) 
---
> allocate (dtau_sw_cld   (ie-is+1, je-js+1, num_levels, nS))
> allocate (dtau_sw_ray   (ie-is+1, je-js+1, num_levels, nS))
376c395,464
< !deltanu_trunc(:) = 25.0 !50.0 !25.0d0 
---
> allocate(gas_name(nGas))
> allocate(gas_molarconc(nGas))
> !deltanu_trunc(:) = 25.0 !50.0 !25.0d0
> !composition.f90
>     ! create gas name and molar concentration arrays
>     !if (.not.allocated(gas_name))      allocate(gas_name(nGas))
>     !if (.not.allocated(gas_molarconc)) allocate(gas_molarconc(nGas))
>     gas_name(1:nGas)      = gas_name_MAX(1:nGas)
>     gas_molarconc(1:nGas) = gas_molarconc_MAX(1:nGas)
>     vgas = 0
>     ! identify the variable gas
>     do iGas = 1, nGas
>        if(gas_molarconc(iGas)<0.0d0 )then
>           if (master) write(6,*) 'Variable gas is ',gas_name(iGas)
>           vgas = iGas
>           !call get_vgas_params
>           exit
>        end if
>     end do
>     if(vgas==0 .and. master) write(6,*) 'No variable gas found!'
> 
>     ! assign the 'iGas_X' labels
>     do iGas=1,nGas
>        if (gas_name(iGas)=="H2_") then
>           iGas_H2=iGas
>           mu_i(iGas_H2)=2.0159       ! molar mass of H2 [g/mol]
>        elseif (gas_name(iGas)=="He_") then
>           iGas_He=iGas
>           mu_i(iGas_He)=4
>        elseif (gas_name(iGas)=="H2O") then
>           iGas_H2O=iGas
>           mu_i(iGas_H2O)=18.01528     ! molar mass of H2O [g/mol]
>        elseif (gas_name(iGas)=="CO2") then
>           iGas_CO2=iGas
>           mu_i(iGas_CO2)=44.0095      ! molar mass of CO2 [g/mol]
>        elseif (gas_name(iGas)=="CO_") then
>           iGas_CO=iGas
>           mu_i(iGas_CO)=28
>        elseif (gas_name(iGas)=="N2_") then
>           iGas_N2=iGas
>           mu_i(iGas_N2)=28.014       ! molar mass of N2 [g/mol]
>        elseif (gas_name(iGas)=="O2_") then
>           iGas_O2=iGas
>           mu_i(iGas_O2)=32
>        elseif (gas_name(iGas)=="O3_") then
>           iGas_O3=iGas
>           mu_i(iGas_O3)= 48.00        ! molar mass of O3 [g/mol]
>        elseif (gas_name(iGas)=="SO2") then
>           iGas_SO2=iGas
>           mu_i(iGas_SO2)=64.06        ! molar mass of SO2 [g/mol]
>        elseif (gas_name(iGas)=="H2S") then
>           iGas_H2S=iGas
>           mu_i(iGas_H2S)=34.08        ! molar mass of H2S [g/mol]
>        elseif (gas_name(iGas)=="CH4") then
>           iGas_CH4=iGas
>           mu_i(iGas_CH4)=16.04        ! molar mass of CH4 [g/mol]
>        elseif (gas_name(iGas)=="NH3") then
>           iGas_NH3=iGas
>           mu_i(iGas_NH3)=17
>        endif
>        f_i(:,:,:,iGas)=gas_molarconc(iGas)
>        deltanu_trunc(iGas)=deltanu_trunc_MAX(iGas)
>     enddo
> 
> !print *, gas_molarconc_MAX(iGas_CO2) !f_i(1,1,:,iGas_CO2)
>     !-----------------------------------------------------------------------
> vgas_mask(1:nGas)=1.0
> if(vgas>0) vgas_mask(vgas)=0.0
> mu_dry = sum(gas_molarconc(:)*mu_i(:)*vgas_mask(:))/&
>         sum(gas_molarconc(:)*vgas_mask(:))
381,382c469,478
<          play(:,:,num_levels-k+1)  = pfull(:,:,k) 
<          f_i(:,:,num_levels-k+1,1) = q(:,:,k)
---
>          play(:,:,num_levels-k+1)  = pfull(:,:,k)
>          if(vgas .ne. 0) f_i(:,:,num_levels-k+1,vgas) = q(:,:,k) /&
>                 (mu_i(vgas)/mu_dry+(1-mu_i(vgas)/mu_dry)*q(:,:,k))
>          !from q to molar concentration
> enddo
> if (vgas==0) then
>    mu_avg(:,:,:) = mu_dry
> else
>    mu_avg(:,:,:)=mu_dry*(1-f_i(:,:,:,vgas)) + mu_i(vgas)*f_i(:,:,:,vgas)
> endif
383a480,481
> do iGas=1,nGas
>    if (iGas .ne. vgas) f_i(:,:,:,iGas) = f_i(:,:,:,iGas)*(1-f_i(:,:,:,vgas))
384a483,486
> !if (master) write(6,*) mu_dry, mu_avg(1,1,:), &
> !        iGas_CO2, f_i(1,1,:,iGas_CO2), &
> !        iGas_H2O, f_i(1,1,:,iGas_H2O), &
> !        vgas
386c488
< mu_i(1) = 18.01528     ! molar mass of H2O [g/mol]
---
> !mu_i(1) = 18.01528     ! molar mass of H2O [g/mol]
388c490
< mu_i(2) = 44.0095      ! molar mass of CO2 [g/mol]
---
> !mu_i(2) = 44.0095      ! molar mass of CO2 [g/mol]
390,391c492,493
< deltanu_trunc(1) = 25.0
< deltanu_trunc(2) = 25.0 !500.0
---
> !deltanu_trunc(1) = 25.0
> !deltanu_trunc(2) = 25.0 !500.0
396,405c498,505
< mu_dry = ( 28. + mu_i(2)*mCO2) / (1+mCO2) 
< f_i(:,:,:,1) = f_i(:,:,:,1) / &
<         (mu_i(1)/mu_dry + (1 - mu_i(1)/mu_dry)*f_i(:,:,:,1))
< f_i(:,:,:,2) = mCO2 /(1+mCO2) *(1-f_i(:,:,:,1))
< 
< mu_avg(:,:,:)   = 28. !dominant componets
< do iGas=1,nGas
<    mu_avg = mu_avg + (mu_i(iGas) - 28.) *f_i(:,:,:,iGas)
< end do
< !f_i(:,:,:,1) = f_i(:,:,:,1) * mu_avg(:,:,:) / mu_i(1)  !should be molar concentration, q is mass concentration now
---
> !mu_dry = ( 28. + mu_i(2)*mCO2) / (1+mCO2)
> !f_i(:,:,:,1) = f_i(:,:,:,1) / &
> !        (mu_i(1)/mu_dry + (1 - mu_i(1)/mu_dry)*f_i(:,:,:,1))
> !f_i(:,:,:,2) = mCO2 /(1+mCO2) *(1-f_i(:,:,:,1))
> !mu_avg(:,:,:)   = 28. !dominant componets
> !do iGas=1,nGas
> !   mu_avg = mu_avg + (mu_i(iGas) - 28.) *f_i(:,:,:,iGas)
> !end do
442,444c542,543
< 
< !define ISR
< if (tidal_lock) then
---
> !define ISR now in setup shortwave
> !if (tidal_lock) then
446,450c545,549
<     cosa0(:,:) =  cos(agrid(:,:,2)) * &
<         cos(agrid(:,:,1) - noon_longitude*deg_to_rad)
<     where (cosa0 .lt. 0.0) cosa0 = 0.0
<     Fstel0(:,:) = solar_constant * cosa0(:,:)
< else
---
> !    cosa0(:,:) =  cos(agrid(:,:,2)) * &
> !        cos(agrid(:,:,1) - noon_longitude*deg_to_rad)
> !    where (cosa0 .lt. 0.0) cosa0 = 0.0
> !    Fstel0(:,:) = solar_constant * cosa0(:,:)
> !else
452,458c551,556
<     cosa0(:,:) = cos(agrid(:,:,2)) !/ pi
<     Fstel0(:,:) = solar_constant * cosa0(:,:) /pi !zero obliquity
<     Fstel0(:,:) = solar_constant/4.*(1+ 0.25* &
<         (1-3*sin(agrid(:,:,2))**2)) !23.5 obliquity
< endif
< 
< gsca = 0.85d0
---
> !    cosa0(:,:) = cos(agrid(:,:,2)) !/ pi
> !    Fstel0(:,:) = solar_constant * cosa0(:,:) /pi !zero obliquity
> !    Fstel0(:,:) = solar_constant/4.*(1+ 0.25* &
> !        (1-3*sin(agrid(:,:,2))**2)) !23.5 obliquity
> !endif
> ! gsca = 0.85d0
498c596
<      axes((/1,2,5/)), Time, 'longwave optical thickness','none') 
---
>      axes((/1,2,5/)), Time, 'longwave optical thickness','none')
501c599
<      axes((/1,2,4/)), Time, 'longwave flux(positive upward)','W/m**2') 
---
>      axes((/1,2,4/)), Time, 'longwave flux(positive upward)','W/m**2')
507c605
<      axes((/3,5/)), Time, 'longwave abs','') 
---
>      axes((/5/)), Time, 'longwave abs','')
510c608
<      axes((/1,2,5/)), Time, 'longwave abs','') 
---
>      axes((/1,2,5/)), Time, 'longwave abs','')
513c611
<      axes((/1,2,5/)), Time, 'longwave abs','') 
---
>      axes((/1,2,5/)), Time, 'longwave abs','')
516c614
<      axes((/1,2,5/)), Time, 'OLR spectrum','W/m**2/cm-1') 
---
>      axes((/1,2,5/)), Time, 'OLR spectrum','W/m**2/cm-1')
519c617
<      axes((/1,2/)), Time, 'OLR','W/m**2') 
---
>      axes((/1,2/)), Time, 'OLR','W/m**2')
531c629
<      axes((/1,2,5/)), Time, 'OSR spectrum','W/m**2/cm-1') 
---
>      axes((/1,2,5/)), Time, 'OSR spectrum','W/m**2/cm-1')
534c632
<      axes((/1,2/)), Time, 'OSR','W/m**2') 
---
>      axes((/1,2/)), Time, 'OSR','W/m**2')
537c635
<      axes((/1,2,3/)), Time, 'longwave heating rate','K/sec') 
---
>      axes((/1,2,3/)), Time, 'longwave heating rate','K/sec')
540c638
<      axes((/1,2,3/)), Time, 'shortwave heating rate','K/sec') 
---
>      axes((/1,2,3/)), Time, 'shortwave heating rate','K/sec')
554c652,653
< if (id_sigma_lw>0) used = send_data(id_sigma_lw, sigma_lw_ar(:,:,2,1) , Time) !npz, nS, nGas, nTem
---
> ! if (id_sigma_lw>0) used = send_data(id_sigma_lw, sigma_lw_ar(1,:,iGas_H2O,1) , Time) !npz, nS, nGas, nTem
> if (id_sigma_lw>0) used = send_data(id_sigma_lw, sigma_total_dry(1,:,1) , Time) !npz, nS, nGas, nTem
576c675
< master = (gid == masterproc)
---
> !master = (gid == masterproc)
583,585c682,687
<          play(:,:,nLay-iLay+1)  = pfull(:,:,iLay) 
<          f_i(:,:,nLay-iLay+1,1) = q(:,:,iLay)
<          plev(:,:,nLay-iLay+2)  = phalf(:,:,iLay) 
---
>          play(:,:,nLay-iLay+1)  = pfull(:,:,iLay)
> !         f_i(:,:,nLay-iLay+1,1) = q(:,:,iLay)
>          if(vgas .ne. 0) f_i(:,:,nLay-iLay+1,vgas) = q(:,:,iLay) /&
>                 (mu_i(vgas)/mu_dry+(1-mu_i(vgas)/mu_dry)*q(:,:,iLay))
> 
>          plev(:,:,nLay-iLay+2)  = phalf(:,:,iLay)
587c689
<          !lnplev(i-is+1,j-js+1,nLay-iLay+2)= peln(i,iLay,j) 
---
>          !lnplev(i-is+1,j-js+1,nLay-iLay+2)= peln(i,iLay,j)
591a694,707
> if (vgas==0) then
>    mu_avg(:,:,:) = mu_dry
> else
>    mu_avg(:,:,:)=mu_dry*(1-f_i(:,:,:,vgas)) + mu_i(vgas)*f_i(:,:,:,vgas)
> endif
> do iGas=1,nGas
>    if (iGas .ne. vgas) f_i(:,:,:,iGas) = f_i(:,:,:,iGas)*(1-f_i(:,:,:,vgas))
> enddo
> ! if (master) write(6,*) mu_dry, mu_avg(1,1,:), &
> !         iGas_CO2, mu_i(iGas_CO2),  &
> !         iGas_H2O, mu_i(iGas_H2O),  &
> !         iGas_N2 , mu_i(iGas_N2 ), f_i(:,:,1,vgas), &
> !         vgas
> 
593c709
< dp(:,:,:) = plev(:,:,1:nLay) - plev(:,:,2:nLay+1)  
---
> dp(:,:,:) = plev(:,:,1:nLay) - plev(:,:,2:nLay+1)
607,616c723,730
< mu_dry = ( 28. + mu_i(2)*mCO2) / (1+mCO2)
< f_i(:,:,:,1) = f_i(:,:,:,1) / &
<         (mu_i(1)/mu_dry + (1 - mu_i(1)/mu_dry)*f_i(:,:,:,1))
< f_i(:,:,:,2) = mCO2 /(1+mCO2) *(1-f_i(:,:,:,1))
< 
< mu_avg(:,:,:)   = 28. !dominant componets
< do iGas=1,nGas
<    mu_avg = mu_avg + (mu_i(iGas) - 28.) *f_i(:,:,:,iGas)
< end do
< !f_i(:,:,:,1) = f_i(:,:,:,1) * mu_avg(:,:,:) / mu_i(1)  !should be molar concentration, q is mass concentration now
---
> !mu_dry = ( 28. + mu_i(2)*mCO2) / (1+mCO2)
> !f_i(:,:,:,1) = f_i(:,:,:,1) / &
> !        (mu_i(1)/mu_dry + (1 - mu_i(1)/mu_dry)*f_i(:,:,:,1))
> !f_i(:,:,:,2) = mCO2 /(1+mCO2) *(1-f_i(:,:,:,1))
> !mu_avg(:,:,:)   = 28. !dominant componets
> !do iGas=1,nGas
> !   mu_avg = mu_avg + (mu_i(iGas) - 28.) *f_i(:,:,:,iGas)
> !end do
636c750
< !         6.35112310e-11,   1.10281111e-10/) 
---
> !         6.35112310e-11,   1.10281111e-10/)
647c761
<     
---
> 
683c797
<     
---
> 
733c847
< !t_surf = t_surf + dt_surf_rad *dt_atmos 
---
> !t_surf = t_surf + dt_surf_rad *dt_atmos
738c852
<    dTrad(:,:,iLay) = dTdt(:,:,nLay-iLay+1)  
---
>    dTrad(:,:,iLay) = dTdt(:,:,nLay-iLay+1)
740c854
<    dTs_rad(:,:) = dt_surf_rad(:,:) 
---
>    dTs_rad(:,:) = dt_surf_rad(:,:)
761,762c875,876
< if (id_hrsw>0) used=send_data(id_hrsw, ( dtau_sw_ray(:,:,:,188) +dtau_sw_cld(:,:,:,188)) /&
<             dtau_sw_i(:,:,:,188) , Time_diag)
---
> ! if (id_hrsw>0) used=send_data(id_hrsw, ( dtau_sw_ray(:,:,:,188) +dtau_sw_cld(:,:,:,188)) /&
> !             dtau_sw_i(:,:,:,188) , Time_diag)
804c918
<                                                                       
---
> 
806,807c920,921
<                                                                                                       
< !deallocate (b, tdt_rad, tdt_sw, entrop_rad) 
---
> 
> !deallocate (b, tdt_rad, tdt_sw, entrop_rad)
854c968
<        read_loop : do 
---
>        read_loop : do
880c994
<           
---
> 
890c1004
<        
---
> 
938c1052
<     
---
> 
955c1069
<        
---
> 
957c1071
<           
---
> 
962c1076
<           
---
> 
971c1085
<           
---
> 
983c1097
<           
---
> 
992c1106
<           
---
> 
994c1108
<        
---
> 
998c1112
<     
---
> 
1001c1115
<  
---
> 
1006c1120
<     
---
> 
1018c1132
<     
---
> 
1021c1135
<     
---
> 
1072c1186
<                    
---
> 
1080c1194
<     
---
> 
1119,1122c1233,1238
<           if(nu(iS)>0.0d0 .and. nu(iS)<500.0d0)then
<              call calculate_CO2CO2_cia(1,T,nu(iS),p*f_i(iGas_CO2)/atm,sigma_temp) ! induced dipole             
<           elseif(nu(iS)>700.0d0 .and. nu(iS)<2000.0d0) then
<              call calculate_CO2CO2_cia(2,T,nu(iS),p*f_i(iGas_CO2)/atm,sigma_temp) ! dimer
---
> !          if(nu(iS)>0.0d0 .and. nu(iS)<3000.0d0)then
> !             call calculate_cia('CO2CO2',nu(iS),T,p,p*f_i(iGas_CO2),p*f_i(iGas_CO2),sigma_temp,.false.)
>            if(nu(iS)>0.0d0 .and. nu(iS)<500.0d0)then
>               call calculate_CO2CO2_cia(1,T,nu(iS),p*f_i(iGas_CO2)/atm,sigma_temp) ! induced dipole             
>            elseif(nu(iS)>700.0d0 .and. nu(iS)<2000.0d0) then
>               call calculate_CO2CO2_cia(2,T,nu(iS),p*f_i(iGas_CO2)/atm,sigma_temp) ! dimer
1124a1241
>           !sigma_CIA(iS) = sigma_temp
1131,1140c1248,1259
<            if(nu(iS)>1150.0d0 .and. nu(iS)<1950.0d0)then
<               call calculate_O2O2_cia(T, nu(iS),p*f_i(iGas_O2)/atm,f_i(iGas_O2),sigma_temp) 
<            elseif(nu(iS)>7450.0d0 .and. nu(iS)<8487.0d0) then
<               call calculate_O2O2_cia(T, nu(iS),p*f_i(iGas_O2)/atm,f_i(iGas_O2),sigma_temp) 
<            elseif(nu(iS)>9001.0d0 .and. nu(iS)<9997.0d0) then
<               call calculate_O2O2_cia(T, nu(iS),p*f_i(iGas_O2)/atm,f_i(iGas_O2),sigma_temp) 
<            elseif(nu(iS)>12600.0d0 .and. nu(iS)<13839.0d0) then
<               call calculate_O2O2_cia(T, nu(iS),p*f_i(iGas_O2)/atm,f_i(iGas_O2),sigma_temp) 
<            elseif(nu(iS)>14996.0d0 .and. nu(iS)<29790.0d0) then
<               call calculate_O2O2_cia(T, nu(iS),p*f_i(iGas_O2)/atm,f_i(iGas_O2),sigma_temp) 
---
> !           if(nu(iS)>1150.0d0 .and. nu(iS)<29790.0d0)then
> !              call calculate_cia('O2_O2_', nu(iS),T,p,p*f_i(iGas_O2),p*f_i(iGas_O2),sigma_temp,.false.)
>             if(nu(iS)>1150.0d0 .and. nu(iS)<1950.0d0)then
>                call calculate_O2O2_cia(T,nu(iS),p*f_i(iGas_O2)/atm,f_i(iGas_O2),sigma_temp) 
>             elseif(nu(iS)>7450.0d0 .and. nu(iS)<8487.0d0) then
>                call calculate_O2O2_cia(T,nu(iS),p*f_i(iGas_O2)/atm,f_i(iGas_O2),sigma_temp) 
>             elseif(nu(iS)>9001.0d0 .and. nu(iS)<9997.0d0) then
>                call calculate_O2O2_cia(T,nu(iS),p*f_i(iGas_O2)/atm,f_i(iGas_O2),sigma_temp) 
>             elseif(nu(iS)>12600.0d0 .and. nu(iS)<13839.0d0) then
>                call calculate_O2O2_cia(T,nu(iS),p*f_i(iGas_O2)/atm,f_i(iGas_O2),sigma_temp) 
>             elseif(nu(iS)>14996.0d0 .and. nu(iS)<29790.0d0) then
>                call calculate_O2O2_cia(T,nu(iS),p*f_i(iGas_O2)/atm,f_i(iGas_O2),sigma_temp) 
1194c1313
<     
---
> 
1214c1333
<   
---
> 
1226c1345
<     !------- subroutine options --------------  
---
>     !------- subroutine options --------------
1229c1348
<  !   ! read namelist 
---
>  !   ! read namelist
1238c1357
<     
---
> 
1263c1382
<           
---
> 
1269c1388
<              
---
> 
1284c1403
<              
---
> 
1294c1413
<              
---
> 
1303c1422
<                 
---
> 
1308c1427
<                 
---
> 
1312c1431
< !                else               
---
> !                else
1337c1456
<                       sigma_lw_ar(iLay,:,iGas,iTem)*f_i(1,1,iLay,iGas) 
---
>                       sigma_lw_ar(iLay,:,iGas,iTem)*f_i(1,1,iLay,iGas)
1340,1341c1459,1460
<                 
<                    
---
> 
> 
1361c1480
<          
---
> 
1413c1532
< !!$            0.5255324099163290,  & 
---
> !!$            0.5255324099163290,  &
1418c1537
< !!$       ci(:) =(/ 0.3626837833783620, & 
---
> !!$       ci(:) =(/ 0.3626837833783620, &
1432c1551
<     
---
> 
1444c1563
<     
---
> 
1447c1566
<     ! read namelist 
---
>     ! read namelist
1456c1575
<     
---
> 
1477,1478c1596,1597
<     integer, intent(inout) :: iT1(:,:,:)         ! T-grid array points for linear interpolation [] 
<     real(8), intent(out) :: T_lin_weight(:,:,:,:) ! temperature weigting for linear interpolation [] 
---
>     integer, intent(inout) :: iT1(:,:,:)         ! T-grid array points for linear interpolation []
>     real(8), intent(out) :: T_lin_weight(:,:,:,:) ! temperature weigting for linear interpolation []
1481c1600
<     
---
> 
1485c1604
<     
---
> 
1496c1615
<        find_iT : do 
---
>        find_iT : do
1529c1648
<        T_lin_weight(i,j,iLay,:) = (Tlay(i,j,iLay) - T_k_grid(iLay,iT1(i,j,iLay)))/(T_k_grid(iLay,iT1(i,j,iLay)+1) - T_k_grid(iLay,iT1(i,j,iLay))) 
---
>        T_lin_weight(i,j,iLay,:) = (Tlay(i,j,iLay) - T_k_grid(iLay,iT1(i,j,iLay)))/(T_k_grid(iLay,iT1(i,j,iLay)+1) - T_k_grid(iLay,iT1(i,j,iLay)))
1537c1656
< !       T_lin_weight(:,iLay) = (Tlay(iLay) - T_k_grid(iLay,iT1(iLay)))/(T_k_grid(iLay,iT2(iLay)) - T_k_grid(iLay,iT1(iLay))) 
---
> !       T_lin_weight(:,iLay) = (Tlay(iLay) - T_k_grid(iLay,iT1(iLay)))/(T_k_grid(iLay,iT2(iLay)) - T_k_grid(iLay,iT1(iLay)))
1564c1683
<     integer, intent(in)  :: iT1(:,:,:)             ! T-grid array points for linear interpolation [] 
---
>     integer, intent(in)  :: iT1(:,:,:)             ! T-grid array points for linear interpolation []
1569c1688
<     real(8), intent(in)  :: T_lin_weight(:,:,:,:) ! temperature weigting for linear interpolation [] 
---
>     real(8), intent(in)  :: T_lin_weight(:,:,:,:) ! temperature weigting for linear interpolation []
1577,1578c1696,1697
<     real(8), intent(out) :: OLRnu(:,:,:)             ! outgoing longwave spectral irradiance [W/m2/cm^-1/sr] 
<     real(8), intent(out) :: OLR(:,:)                   ! total outgoing longwave irradiance [W/m2/sr] 
---
>     real(8), intent(out) :: OLRnu(:,:,:)             ! outgoing longwave spectral irradiance [W/m2/cm^-1/sr]
>     real(8), intent(out) :: OLR(:,:)                   ! total outgoing longwave irradiance [W/m2/sr]
1589c1708
<     
---
> 
1626c1745
<        if(nTem==1)then   
---
>        if(nTem==1)then
1653,1654c1772,1773
<        
<     
---
> 
> 
1683c1802
<           + 3./4/dens_h2o/r_cld *dp(i,j,iLay)/grav *f_cld(i,j,iLay) !cloud optical thickness assuming absorption cross section of pi*r**2 
---
>           + 3./4/dens_h2o/r_cld *dp(i,j,iLay)/grav *f_cld(i,j,iLay) !cloud optical thickness assuming absorption cross section of pi*r**2
1690c1809
<     
---
> 
1705c1824
<     
---
> 
1718c1837
<     
---
> 
1729c1848
<           if(dTran(i,j,iLay,iS) < 1.0d-16)then           
---
>           if(dTran(i,j,iLay,iS) < 1.0d-16)then
1762c1881
<     OLRnu(:,:,:)        = I_lev_up(:,:,nLay+1,:) 
---
>     OLRnu(:,:,:)        = I_lev_up(:,:,nLay+1,:)
1794c1913
<     real, intent(out) :: nu_sw_out(nS)       ! shortwave wavenumber [cm^-1]    
---
>     real, intent(out) :: nu_sw_out(nS)       ! shortwave wavenumber [cm^-1]
1798c1917
<     real :: nu_sw_check                         ! shortwave wavenumber [cm^-1]   
---
>     real :: nu_sw_check                         ! shortwave wavenumber [cm^-1]
1802c1921
<     ! read namelist 
---
>     ! read namelist
1846c1965
<     if(.not.multiple_scat .and. .not.rayleigh_top)then 
---
>     if(.not.multiple_scat .and. .not.rayleigh_top)then
1856c1975
<     end if 
---
>     end if
1872c1991
<     sigma_sw_total_dry(:,:,:) = 0.0d0 ! dry total absorption cross-section (no variable gas) [cm2 / molecules of air] 
---
>     sigma_sw_total_dry(:,:,:) = 0.0d0 ! dry total absorption cross-section (no variable gas) [cm2 / molecules of air]
1901c2020
< !             close(2)             
---
> !             close(2)
1912c2031
< !             close(2)             
---
> !             close(2)
1921c2040
< !             close(3)             
---
> !             close(3)
1960c2079
<                    
---
> 
2004,2007c2123,2129
<        open(unit=3,file=trim(datadir)//'stellar_data/nu.dat')
<        open(unit=4,file=trim(datadir)//'stellar_data/Fsol_3p8_Ga.dat')
<        !open(unit=3,file=trim(datadir)//'stellar_data/nu_adleo.dat')
<        !open(unit=4,file=trim(datadir)//'stellar_data/Fadleo.dat')
---
>       if(adleo)then
>          open(unit=3,file=trim(datadir)//'stellar_data/nu_adleo.dat')
>          open(unit=4,file=trim(datadir)//'stellar_data/Fadleo.dat')
>       else
>          open(unit=3,file=trim(datadir)//'stellar_data/nu.dat')
>          open(unit=4,file=trim(datadir)//'stellar_data/Fsol_3p8_Ga.dat')
>       end if
2014c2136
<        close(3)       
---
>        close(3)
2048c2170
<   
---
> 
2071c2193
<     
---
> 
2073c2195
<     lam_sw  = 1.0d4/nu_sw 
---
>     lam_sw  = 1.0d4/nu_sw
2080c2202,2203
<              tau_Ray(i,j,:) = 1.4098d-6*lam_sw(:)**(-4)*(1.0d0 + 0.013d0*lam_sw(:)**(-2))*(ps(i,j)/grav)          ! Hansen & Travis eqn. (2.32)
---
>             !  tau_Ray(i,j,:) = 1.4098d-6*lam_sw(:)**(-4)*(1.0d0 + 0.013d0*lam_sw(:)**(-2))*(ps(i,j)/grav)          ! Hansen & Travis eqn. (2.32)
>              tau_Ray(i,j,:) = sigma_sca*lam_sw(:)**(-4)*(1.0d0 + 0.013d0*lam_sw(:)**(-2))*(ps(i,j)/grav)          ! Hansen & Travis eqn. (2.32)
2097,2098c2220,2221
<     !   
<     !else                 ! Rayleigh scattering applied at surface 
---
>     !
>     !else                 ! Rayleigh scattering applied at surface
2107,2108c2230,2231
<     
<     integer, intent(in)  :: iT1(:,:,:)             ! T-grid array points for linear interpolation []nLay 
---
> 
>     integer, intent(in)  :: iT1(:,:,:)             ! T-grid array points for linear interpolation []nLay
2110c2233
<     real(8), intent(in)  :: T_lin_weight(:,:,:,:) ! temperature weigting for linear interpolation []nS,nLay 
---
>     real(8), intent(in)  :: T_lin_weight(:,:,:,:) ! temperature weigting for linear interpolation []nS,nLay
2117,2120c2240,2243
<     
<     real(8), intent(out) :: I_dn_BOA(:,:)               ! ground diffuse irradiance [W/m2/sr] 
<     real(8), intent(out) :: I_up_TOA_nu(:,:,:)        ! outgoing diffuse spectral irradiance [W/m2/cm^-1/sr] 
<     real(8), intent(out) :: I_up_TOA(:,:)               ! outgoing diffuse irradiance [W/m2/sr] 
---
> 
>     real(8), intent(out) :: I_dn_BOA(:,:)               ! ground diffuse irradiance [W/m2/sr]
>     real(8), intent(out) :: I_up_TOA_nu(:,:,:)        ! outgoing diffuse spectral irradiance [W/m2/cm^-1/sr]
>     real(8), intent(out) :: I_up_TOA(:,:)               ! outgoing diffuse irradiance [W/m2/sr]
2155c2278
<        if(nTem==1)then   
---
>        if(nTem==1)then
2182,2183c2305,2306
<        
<     
---
> 
> 
2213c2336
<           !rayleigh scattering optical thickness of Earth's air at 1um 
---
>           !rayleigh scattering optical thickness of Earth's air at 1um
2216c2339
<           !cloud scattering optical thickness 
---
>           !cloud scattering optical thickness
2218c2341
<           !dtau_sw_cld(i,j,iLay,:) = 1e-10 
---
>           !dtau_sw_cld(i,j,iLay,:) = 1e-10
2231c2354
<     !tau_sw_inf(:,:,:) = sum(dtau_sw_i(:,:,:,:),3) 
---
>     !tau_sw_inf(:,:,:) = sum(dtau_sw_i(:,:,:,:),3)
2245c2368
<     ! Calculate downwards (direct beam) spectral irradiance 
---
>     ! Calculate downwards (direct beam) spectral irradiance
2250c2373
<     !   I_lev_dir(:,:,iLev,:) = I_lev_dir(:,:,iLev+1,:)*dTran0(:,:,iLay,:) 
---
>     !   I_lev_dir(:,:,iLev,:) = I_lev_dir(:,:,iLev+1,:)*dTran0(:,:,iLay,:)
2258c2381
< !          if(dTran(i,j,iLay,iS) < 1.0d-16)then           
---
> !          if(dTran(i,j,iLay,iS) < 1.0d-16)then
2280c2403
<         ! create correct aL, bL and tauL arrays 
---
>         ! create correct aL, bL and tauL arrays
2295c2418
<     
---
> 
2302c2425
<            bL(:,:,iLay) = 1./2 - 3./8*x1_rescaled(:,:,iRev) 
---
>            bL(:,:,iLay) = 1./2 - 3./8*x1_rescaled(:,:,iRev)
2304c2427
<         enddo        
---
>         enddo
2326,2327c2449,2450
<                  if (ts(i,j) .gt. tfreeze) then 
<                  
---
>                  if (ts(i,j) .gt. tfreeze) then
> 
2353c2476
<        end do 
---
>        end do
2357c2480
<      else 
---
>      else
2360c2483
<       I_lev_dn(:,:,:,:) = 0.0d0 
---
>       I_lev_dn(:,:,:,:) = 0.0d0
2362c2485
<     ! Calculate upwards spectral irradiance 
---
>     ! Calculate upwards spectral irradiance
2380c2503
<     endif !end multiple scattering 
---
>     endif !end multiple scattering
2395c2518
<     ! CHECK THIS 
---
>     ! CHECK THIS
2409c2532
<     ! sum of diffuse and direct downward beams 
---
>     ! sum of diffuse and direct downward beams
2411,2413c2534,2536
<     !I_lev_up_int(:)  = dnu_sw*sum(I_lev_up(:,1:nS), 2) 
<     !I_lev_dn_int(:)  = dnu_sw*sum(I_lev_dn(:,1:nS), 2) 
<     !I_lev_dir_int(:) = dnu_sw*sum(I_lev_dir(:,1:nS),2) 
---
>     !I_lev_up_int(:)  = dnu_sw*sum(I_lev_up(:,1:nS), 2)
>     !I_lev_dn_int(:)  = dnu_sw*sum(I_lev_dn(:,1:nS), 2)
>     !I_lev_dir_int(:) = dnu_sw*sum(I_lev_dir(:,1:nS),2)
2426c2549
<     
---
> 
2428c2551
<        I_lev_dir_int(:,:,iLev) =  I_lev_dir_int(:,:,iLev)*omega_stel*cosa0(:,:) 
---
>        I_lev_dir_int(:,:,iLev) =  I_lev_dir_int(:,:,iLev)*omega_stel*cosa0(:,:)
2467,2502d2589
< subroutine orbital_dis(kappa_season, distance)
< !real(8), intent(in), dimension(:) :: t, q, p_full
< real(8), intent(in) :: kappa_season
< real(8), intent(out):: distance
< 
< distance = semimajor*(1.-ecc*ecc)/(1.+ecc*cos(kappa_season))
< end subroutine orbital_dis
< 
< subroutine kappadot(kappa_season, vel)
< real(8), intent(in) :: kappa_season
< real(8), intent(out):: vel
< 
< real(8) :: semiminor, dis
< semiminor = semimajor *(1-ecc**2)**0.5
< call orbital_dis(kappa_season, dis)
< vel = semimajor * semiminor * 2* pi /Torb &
<         /seconds_per_day /dis**2
< end subroutine kappadot
< 
< subroutine find_substellar(kappa_old, lon_old, &
<         kappa_new, lon_new, lat_new)
< real(8), intent(in) :: kappa_old, lon_old, lat_old
< real(8), intent(out):: kappa_new, lon_new, lat_new
< 
< real(8) :: kappavel
< call kappadot(kappa_old, kappavel)
< 
< kappa_new = kappa_old + kappavel* deltat_rad
< lat_new   = asin( sin(obl*deg2rad)*cos(kappa_new -prec*deg2rad))
< lon_new   = lon_old - 2*pi*(1./Trot - 1./Torb) &
<         /seconds_per_day *deltat_rad
< 
< if (lon_new < 0) lon_new = lon_new + 2*pi
< 
< end subroutine find_substellar
< 
2505,2508d2591
< 
< 
< 
< 
